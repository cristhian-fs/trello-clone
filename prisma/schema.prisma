datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  MEMBER
}

model User {
  id                   String         @id @default(cuid())
  name                 String?
  email                String?        @unique
  emailVerified        DateTime?      @map("email_verified")
  image                String?
  password             String?
  accounts             Account[]
  memberships          Membership[]
  createdOrganizations Organization[] @relation("CreatedByUser")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Organization {
  id                    String   @id @default(cuid())
  name                  String
  slug                  String   @unique
  createdBy             String
  creator               User     @relation("CreatedByUser", fields: [createdBy], references: [id])
  membersCount          Int      @default(0)
  maxAllowedMemberships Int?
  adminDeleteEnabled    Boolean  @default(false)
  publicMetadata        Json?
  privateMetadata       Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  image                 String?

  memberships Membership[]
  boards      Board[]

  @@map("organizations")
}

model Membership {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId  String
  role            UserRole @default(MEMBER)
  permissions     String[]
  publicMetadata  Json?
  privateMetadata Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, userId])
  @@map("memberships")
}

model Board {
  id             String @id @default(uuid())
  organizationId String
  title          String
  imageId        String
  imageThumbUrl  String @db.Text
  imageFullUrl   String @db.Text
  imageUserName  String @db.Text
  imageLinkHTML  String @db.Text

  @@index([organizationId])
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  lists List[]

  @@map("boards")
}

model List{
  id String @id @default(uuid())
  title String
  order Int
  boardId String
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([boardId])
  @@map("lists") 
}

model Card {
  id String @id @default(uuid())
  title String
  order Int
  description String? @db.Text
  listId String
  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
  @@map("cards")
}